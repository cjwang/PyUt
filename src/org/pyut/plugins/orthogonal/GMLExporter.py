from logging import Logger
from logging import getLogger
from typing import List
from typing import Set
from typing import cast

from org.pyut.general.exceptions.UnsupportedOperation import UnsupportedOperation
from org.pyut.model.PyutObject import PyutObject
from org.pyut.ogl.OglClass import OglClass
from org.pyut.ogl.OglLink import OglLink
from org.pyut.ogl.OglNote import OglNote

from org.pyut.general.PyutVersion import PyutVersion
from org.pyut.ogl.OglObject import OglObject

OglClasses = List[OglClass]


class GMLExporter:

    GRAPH_TOKEN: str = 'graph'

    ID_TOKEN:    str = 'id'
    LABEL_TOKEN: str = 'label'
    NODE_TOKEN:  str = 'node'
    EDGE_TOKEN:  str = 'edge'

    SOURCE_ID_TOKEN: str = 'source'
    TARGET_ID_TOKEN: str = 'target'

    GRAPHICS_TOKEN: str = 'graphics'
    START_TOKEN:    str = '['
    END_TOKEN:      str = ']'

    QUOTE_TOKEN: str = '"'

    LINE_DEFINITION_TOKEN:  str = 'Line'
    POINT_DEFINITION_TOKEN: str = 'point'

    X_POSITION_TOKEN: str = 'x'
    Y_POSITION_TOKEN: str = 'y'
    Z_POSITION_TOKEN: str = 'z'
    WIDTH_TOKEN:      str = 'w'
    HEIGHT_TOKEN:     str = 'h'
    DEPTH_TOKEN:      str = 'd'

    singleIndent: str = ''
    doubleIndent: str = ''
    tripleIndent: str = ''

    def __init__(self):

        self.logger:   Logger = getLogger(__name__)
        self._gml:     str    = ''

        self._prettyPrint: bool = True

    def translate(self, umlObjects: OglClasses):

        if self._prettyPrint is True:
            GMLExporter.singleIndent = '\t'
            GMLExporter.doubleIndent = '\t\t'
            GMLExporter.tripleIndent = '\t\t\t'

        gml: str = self._generateGraphStart()
        gml = self._generateNodes(umlObjects, gml)
        gml = self._generateUniqueEdges(umlObjects=umlObjects, gml=gml)

        gml = self._generateGraphTermination(gml)
        self._gml = gml

    def getGML(self):
        return self._gml

    def setGML(self, theNewValue):
        raise UnsupportedOperation('gml is a read-only property')

    def getPrettyPrint(self):
        return self._prettyPrint

    def setPrettyPrint(self, theNewValue):
        self._prettyPrint = theNewValue

    gml         = property(getGML, setGML)
    prettyPrint = property(getPrettyPrint, setPrettyPrint)

    def write(self, pathToFile: str):

        with open(pathToFile) as writer:
            writer.write(self._gml)

    def _generateNodes(self, umlObjects: OglClasses, gml: str) -> str:

        for umlClass in umlObjects:
            if isinstance(umlClass, OglClass) or isinstance(umlClass, OglNote):
                oglObject:  OglObject  = cast(OglObject, umlClass)
                pyutObject: PyutObject = oglObject.getPyutObject()
                gml = (
                    f'{gml}'
                    f'{GMLExporter.singleIndent}{GMLExporter.NODE_TOKEN} {GMLExporter.START_TOKEN}\n'
                    f'{GMLExporter.doubleIndent}{GMLExporter.ID_TOKEN} {oglObject.GetID()}\n'
                    f'{GMLExporter.doubleIndent}{GMLExporter.LABEL_TOKEN} "{pyutObject.getName()}"\n'
                    f'{self._generateNodeGraphicsSection(oglObject)}'
                )

            gml = f'{gml}\n\t{GMLExporter.END_TOKEN}\n'
        return gml

    def _generateNodeGraphicsSection(self, oglObject: OglObject) -> str:

        pos = oglObject.GetPosition()
        x = pos[0]
        y = pos[1]
        z = 0
        dimensions = oglObject.GetSize()
        w = dimensions[0]
        h = dimensions[1]
        d = 0
        gml = (
            f'{GMLExporter.doubleIndent}{GMLExporter.GRAPHICS_TOKEN} {GMLExporter.START_TOKEN}\n'
            
            f'{GMLExporter.tripleIndent}{GMLExporter.X_POSITION_TOKEN} {x}\n'
            f'{GMLExporter.tripleIndent}{GMLExporter.Y_POSITION_TOKEN} {y}\n'
            f'{GMLExporter.tripleIndent}{GMLExporter.Z_POSITION_TOKEN} {z}\n'
            f'{GMLExporter.tripleIndent}{GMLExporter.WIDTH_TOKEN} {w}\n'
            f'{GMLExporter.tripleIndent}{GMLExporter.HEIGHT_TOKEN} {h}\n'
            f'{GMLExporter.tripleIndent}{GMLExporter.DEPTH_TOKEN} {d}\n'
            f'{GMLExporter.tripleIndent}type "rectangle"\n'
            f'{GMLExporter.tripleIndent}width 0.12\n'
            f'{GMLExporter.tripleIndent}fill "#ff0000"\n'
            f'{GMLExporter.tripleIndent}outline "#000000"\n'
            
            f'{GMLExporter.doubleIndent}{GMLExporter.END_TOKEN}'
        )
        return gml

    def _generateGraphStart(self, graphName: str = 'DefaultGraphName') -> str:

        gml: str = (
            f'{GMLExporter.GRAPH_TOKEN} {GMLExporter.START_TOKEN}\n'
            f'{GMLExporter.singleIndent}directed 1\n'
            f'{GMLExporter.singleIndent}version  1.0\n'
            f'{GMLExporter.singleIndent}label "GML for {graphName}"\n'
            f'{GMLExporter.singleIndent}comment "Generated by Pyut Version {PyutVersion.getPyUtVersion()}"\n'
        )

        return gml

    def _generateGraphTermination(self, gml: str) -> str:

        gml = f'{gml}{GMLExporter.END_TOKEN}'
        return gml

    def _generateUniqueEdges(self, umlObjects: OglClasses, gml: str) -> str:

        linkSet:  Set    = set()        # Concatenated str link ids;  e.g, 1-2

        for umlClass in umlObjects:
            if isinstance(umlClass, OglClass) or isinstance(umlClass, OglNote):
                oglObject: OglObject = cast(OglObject, umlClass)
                links = oglObject.getLinks()
                self.logger.info(f'links: {links}')
                for oglLink in links:
                    srcOglId:  int = oglLink.getSourceShape().GetID()
                    destOglId: int = oglLink.getDestinationShape().GetID()
                    linkIds:   str = f'{srcOglId}-{destOglId}'
                    if linkIds not in linkSet:
                        gml = (
                            f'{gml}'
                            f'{GMLExporter.singleIndent}{GMLExporter.EDGE_TOKEN} {GMLExporter.START_TOKEN}\n'
                            f'{GMLExporter.doubleIndent}{GMLExporter.ID_TOKEN} {oglLink.GetID()}\n'
                            f'{GMLExporter.doubleIndent}{GMLExporter.SOURCE_ID_TOKEN} {srcOglId}\n'
                            f'{GMLExporter.doubleIndent}{GMLExporter.TARGET_ID_TOKEN} {destOglId}\n'
                            f'{GMLExporter.singleIndent}{GMLExporter.END_TOKEN}\n'
                        )
                        linkSet.add(linkIds)

        return gml

    def __generateUniqueEdge(self, oglLink: OglLink, gml: str) -> str:

        srcOglId:  int = oglLink.getSourceShape().GetID()
        destOglId: int = oglLink.getDestinationShape().GetID()

        gml = (
            f'{gml}'
            f'{GMLExporter.singleIndent}{GMLExporter.EDGE_TOKEN} {GMLExporter.START_TOKEN}\n'
            f'{GMLExporter.doubleIndent}{GMLExporter.ID_TOKEN} {oglLink.GetID()}\n'
            f'{GMLExporter.doubleIndent}{GMLExporter.SOURCE_ID_TOKEN} {srcOglId}\n'
            f'{GMLExporter.doubleIndent}{GMLExporter.TARGET_ID_TOKEN} {destOglId}\n'
            f'{GMLExporter.singleIndent}{GMLExporter.END_TOKEN}\n'
        )

        return gml
